# -*- coding: utf-8 -*-
"""demand-forecasting-kernels-only.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TpSK99ukWgm4Kqj_whsGuUf_urRpfmLA
"""

from google.colab import files
files.upload()

!unzip -q "demand-forecasting-kernels-only.zip"

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from pandas import datetime
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

def parser(x):
    return datetime.strptime(x, '%Y-%m-%d')

sales = pd.read_csv('train.csv', parse_dates = [0], date_parser = parser)

plt.figure(figsize=(15,8));
for i in range(1,11):
    month_df = sales[sales.store==i].resample('M',on='date').sum()
    x= np.array(month_df.index)
    y=np.array(month_df.sales)
    plt.plot(x,y,label = 'store %s' % i)
plt.legend(loc='upper left')
plt.title("Total Penjualan Bulanan berdasarkan Toko", fontsize=32)
plt.ylabel("Total Penjualan Bulanan (USD)", fontsize=24)
plt.xlabel("Tahun", fontsize=24)
plt.ylim(0, 160000)
plt.show()

sales.store = sales.store.astype(str)
sales.dtypes

sales.to_csv('tableau_train.csv', index=True)

month_df.head()

sales = sales.set_index('date')
sales['month'] = sales.index.month
sales['year'] = sales.index.year
print(len(sales))
sales.head()

# Restruktur Dataset
store_list = []
items_by_store = []
daily_sales_list = []
daily_diff_list = []
weekly_sales_list = []
weekly_diff_list = []
monthly_sales_list = []
monthly_diff_list = []

# Memisahkan penjualan berdasarkan toko untuk training

for i in range(1, 11):
    store = sales[sales.store == i]
    store_list.append(store)
    
# Kolom terpisah untuk menyimpan kolom non penjualan
    
for i in store_list:
    sales_items = i.drop(columns='sales')
    items_by_store.append(sales_items)


# Convert our time series to daily stationary for each store

for i in store_list:
    daily_sales = i.reset_index().series.resample('D', on='date').sum()
    daily_diff = daily_sales.sales.diff(periods = 1)
    daily_diff = pd.DataFrame(daily_diff)
    daily_diff = daily_diff[1:]
    daily_sales = pd.DataFrame(daily_sales.sales)
    daily_sales_list.append(daily_sales)
    daily_diff_list.append(daily_diff)
    
# Convert our time series to weekly stationary for each store

for i in store_list:
    weekly_sales = i.reset_index().resample('W', on='date').sum()
    weekly_diff = weekly_sales.sales.diff(periods = 1)
    weekly_diff = pd.DataFrame(weekly_diff)
    weekly_diff = weekly_diff[1:]
    weekly_sales = pd.DataFrame(weekly_sales.sales)
    weekly_sales_list.append(weekly_sales)
    weekly_diff_list.append(weekly_diff)
    
    
# Convert our time series to monthly stationary for each store

for i in store_list:
    monthly_sales = i.reset_index().resample('M', on='date').sum()
    monthly_diff = monthly_sales.sales.diff(periods = 1)
    monthly_diff = pd.DataFrame(monthly_diff)
    monthly_diff = monthly_diff[1:]
    monthly_sales = pd.DataFrame(monthly_sales.sales)
    monthly_sales_list.append(monthly_sales)
    monthly_diff_list.append(monthly_diff)

store1_daily_sales = daily_sales_list[0]
print(len(store1_daily_sales))
store1_daily_sales.head()

sales_train = sales[sales.year < 2017]
print(len(sales_train))
sales_train.head()

sales_test = sales[sales.year == 2017]
print(len(sales_test))
sales_test.head()

# Restructure Train Data

store_train_list = []
items_by_store_train = []
daily_sales_train_list = []
daily_diff_train_list = []
weekly_sales_train_list = []
weekly_diff_train_list = []
monthly_sales_train_list = []
monthly_diff_train_list = []

# Separate sales by store for the training set

for i in range(1, 11):
    store = sales_train[sales_train.store == i]
    store_train_list.append(store)
    
# Create a separate dataframe to store non-sales columns for each store in our list
    
for i in store_train_list:
    sales_items = i.drop(columns='sales')
    items_by_store_train.append(sales_items)

# Convert our time series to daily stationary for each store

for i in store_train_list:
    daily_sales = i.reset_index().resample('D', on='date').sum()
    daily_diff = daily_sales.sales.diff(periods = 1)
    daily_diff = pd.DataFrame(daily_diff)
    daily_diff = daily_diff[1:]
    daily_sales = pd.DataFrame(daily_sales.sales)
    daily_sales_train_list.append(daily_sales)
    daily_diff_train_list.append(daily_diff)
    
# Convert our time series to weekly stationary for each store

for i in store_train_list:
    weekly_sales = i.reset_index().resample('W', on='date').sum()
    weekly_diff = weekly_sales.sales.diff(periods = 1)
    weekly_diff = pd.DataFrame(weekly_diff)
    weekly_diff = weekly_diff[1:]
    weekly_sales = pd.DataFrame(weekly_sales.sales)
    weekly_sales_train_list.append(weekly_sales)
    weekly_diff_train_list.append(weekly_diff)
    
# Convert our time series to monthly stationary for each store

for i in store_train_list:
    monthly_sales = i.reset_index().resample('M', on='date').sum()
    monthly_diff = monthly_sales.sales.diff(periods = 1)
    monthly_diff = pd.DataFrame(monthly_diff)
    monthly_diff = monthly_diff[1:]
    monthly_sales = pd.DataFrame(monthly_sales.sales)
    monthly_sales_train_list.append(monthly_sales)
    monthly_diff_train_list.append(monthly_diff)

sales_test = sales[sales.year == 2017]
print(len(sales_test))
sales_test.head()